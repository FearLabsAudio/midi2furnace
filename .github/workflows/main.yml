name: build-binaries

on:
  push:
    branches: [ main, master ]   # build on pushes to main
    tags: [ "v*" ]               # and also on tags like v0.1.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            py: "3.11"
            artifact: midi2furnace-win-${{ runner.arch }}
          - os: macos-latest
            py: "3.11"
            artifact: midi2furnace-mac-${{ runner.arch }}
          - os: ubuntu-22.04
            py: "3.11"
            artifact: midi2furnace-linux-${{ runner.arch }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
          cache: "pip"

      - name: Install system deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1 libglib2.0-0 libasound2 \
            libx11-6 libxext6 libxrender1 libxcursor1 libxrandr2 libxi6 libxxf86vm1

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build (PyInstaller, onedir)
        run: |
          # Clean previous outputs but keep your build/ folder (spec file lives there)
          rm -rf dist .pyibld || true
          pyinstaller --noconfirm --workpath .pyibld build/midi2furnace.spec

      - name: Remove extra root exe if present (Windows quirk)
        shell: bash
        run: |
          rm -f dist/midi2furnace.exe || true

      - name: Zip artifact
        shell: bash
        run: |
          cd dist
          # Zip the onedir folder so users have all DLLs/libs
          7z a -tzip "${{ matrix.artifact }}.zip" "midi2furnace" >/dev/null 2>&1 || \
          zip -r "${{ matrix.artifact }}.zip" "midi2furnace"
          ls -lah

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist/${{ matrix.artifact }}.zip

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
